import telebot
from telebot import types
import pymysql
import os
import pandas as pd
import datetime

# –ò–µ—Ä–∞—Ä—Ö–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_HIERARCHY = {
    "–ò–§–ú–∏–ö–ù": {
        "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç (–æ—á–Ω–æ–µ)": {
            1: ["3301", "3302", "3303", "3304", "3305", "3309"],
            2: ["3201", "3202", "3203", "3205", "3206"],
            3: ["3101", "3102", "3103", "3104", "3105", "3108"],
            4: ["3001", "3002", "3007", "3008"],
            5: ["3902", "3903", "3907", "3910"],
        },
        "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞": {
            1: ["3331"],
            2: ["3231", "3238"],
        },
    },
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ –ë–î
TOKEN = '1971114447:AAEuqjrt5no8_-COr-AHkG12slb3iL1qjHI'
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connection = pymysql.connect(host='localhost', user='root', password='20122001', database='bot')
cursor = connection.cursor()

def save_user_data(user_id, faculty, form_of_education, course, group_name, date):
    cursor.execute("""
        INSERT INTO users (user_id, faculty, form_of_education, course, group_name, last_shown_date)
        VALUES (%s, %s, %s, %s, %s, %s)
        ON DUPLICATE KEY UPDATE faculty=%s, form_of_education=%s, course=%s, group_name=%s, last_shown_date=%s
    """, (user_id, faculty, form_of_education, course, group_name, None, faculty, form_of_education, course, group_name, date))
    connection.commit()

@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id

    cursor.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
    user = cursor.fetchone()

    if user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        faculty = user[1]
        group_name = user[4]  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ group_name –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 5-–º —Å—Ç–æ–ª–±—Ü–µ
        show_schedule_on_start(message, group_name, faculty)
    else:
        markup = types.InlineKeyboardMarkup()
        for faculty in DATA_HIERARCHY.keys():
            markup.add(types.InlineKeyboardButton(text=faculty, callback_data=f"faculty_{faculty}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=markup)

def show_schedule_on_start(message, group_name, faculty):
    schedule_path = os.path.join(os.getcwd(), f"{faculty}\{group_name}.xlsx")
    try:
        df = pd.read_excel(schedule_path)
        current_week_type = get_current_week_type(date_ranges)
        
        response = format_schedule(df, current_week_type)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="change_data"))
        markup.add(types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"show_schedule_{group_name}"))

        bot.send_message(message.chat.id, response, reply_markup=markup, parse_mode='Markdown')
    except Exception as e:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="change_data"))
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}. –ü—Ä–∏—á–∏–Ω–∞: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("faculty_"))
def faculty_selected(call):
    faculty = call.data.split("_")[1]
    markup = types.InlineKeyboardMarkup()
    for form_of_education in DATA_HIERARCHY[faculty].keys():
        markup.add(types.InlineKeyboardButton(text=form_of_education, callback_data=f"form_{faculty}_{form_of_education}"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {faculty}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("form_"))
def form_selected(call):
    faculty, form_of_education = call.data.split("_")[1], call.data.split("_")[2]
    markup = types.InlineKeyboardMarkup()
    for course in DATA_HIERARCHY[faculty][form_of_education].keys():
        markup.add(types.InlineKeyboardButton(text=str(course), callback_data=f"course_{faculty}_{form_of_education}_{course}"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {form_of_education}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("course_"))
def course_selected(call):
    faculty, form_of_education, course = call.data.split("_")[1], call.data.split("_")[2], int(call.data.split("_")[3])
    markup = types.InlineKeyboardMarkup()
    for group in DATA_HIERARCHY[faculty][form_of_education][course]:
        markup.add(types.InlineKeyboardButton(text=group, callback_data=f"group_{faculty}_{form_of_education}_{course}_{group}"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å: {course}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("group_"))
def group_selected(call):
    faculty, form_of_education, course, group = call.data.split("_")[1], call.data.split("_")[2], int(call.data.split("_")[3]), call.data.split("_")[4]
    
    save_user_data(call.from_user.id, faculty, form_of_education, course, group, None)
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"show_schedule_{group}_{faculty}"))
    
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –í—ã –≤—ã–±—Ä–∞–ª–∏:\n\n–§–∞–∫—É–ª—å—Ç–µ—Ç: {faculty}\n–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {form_of_education}\n–ö—É—Ä—Å: {course}\n–ì—Ä—É–ø–ø–∞: {group}", reply_markup=markup)


days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–í—Ç–æ—Ä–Ω–∏–∫",
        "–°—Ä–µ–¥–∞",
        "–ß–µ—Ç–≤–µ—Ä–≥",
        "–ü—è—Ç–Ω–∏—Ü–∞",
        "–°—É–±–±–æ—Ç–∞"]
        
type_of_class = ["–õ–µ–∫—Ü–∏—è",
                 "–°–µ–º–∏–Ω–∞—Ä",
                 "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
                 "–ß–∞—Å –∫—É—Ä–∞—Ç–æ—Ä–∞",
                 "-",
                 "–õ–µ–∫—Ü–∏—è + –°–µ–º–∏–Ω–∞—Ä"]
                 
time_of_class = ["7.45-9.15",
                 "9.25-10.55",
                 "11.15-12.45",
                 "12.55-14.25",
                 "14.35-16.05",
                 "16.25-17.55",
                 "18.00-19.30",
                 "19.35-21.05"]
 
date_ranges = [
    {"start": "2023-10-09", "end": "2023-10-15", "type": "–ß–∏—Å–ª–∏—Ç–µ–ª—å"},
    {"start": "2023-10-16", "end": "2023-10-23", "type": "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å"},
    {"start": "2023-10-24", "end": "2023-10-31", "type": "–ß–∏—Å–ª–∏—Ç–µ–ª—å"},
    # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
]

def format_schedule(df, current_week_type):
    response = ""
    for day in df["–î–µ–Ω—å"].unique():
        if current_week_type == "–ß–∏—Å–ª–∏—Ç–µ–ª—å":
            day_schedule = df[(df["–î–µ–Ω—å"] == day) & ((df["–ß–∏—Å–ª–∏—Ç–µ–ª—å?"] == 1) | (df["–ß–∏—Å–ª–∏—Ç–µ–ª—å?"] == 2))]
        else:  # –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
            day_schedule = df[(df["–î–µ–Ω—å"] == day) & ((df["–ß–∏—Å–ª–∏—Ç–µ–ª—å?"] == 0) | (df["–ß–∏—Å–ª–∏—Ç–µ–ª—å?"] == 2))]

        if not day_schedule.empty:  # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è –µ—Å—Ç—å –ø–∞—Ä—ã
            response += f"üìÖ *{days[day - 1]}*:\n"
            for _, row in day_schedule.iterrows():
                response += f"| –ü–∞—Ä–∞ ‚Ññ{row['–ù–æ–º–µ—Ä –ø–∞—Ä—ã']} ({time_of_class[row['–ù–æ–º–µ—Ä –ø–∞—Ä—ã'] - 1]}): {row['–ü—Ä–µ–¥–º–µ—Ç']}\n"
                response += f"| –ê—É–¥–∏—Ç–æ—Ä–∏—è: {row['–ê—É–¥–∏—Ç–æ—Ä–∏—è']}\n"
                response += f"| {row['–î–æ–ª–∂–Ω–æ—Å—Ç—å']} {row['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']}\n"
                response += f"| –í–∏–¥ –ø–∞—Ä—ã: {type_of_class[row['–í–∏–¥ –ø–∞—Ä—ã']]}\n"
                response += "‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì\n"
            response += "\n"
    return response


def get_current_week_type(date_ranges):
    today = datetime.date.today()
    for range_ in date_ranges:
        start = datetime.datetime.strptime(range_["start"], "%Y-%m-%d").date()
        end = datetime.datetime.strptime(range_["end"], "%Y-%m-%d").date()
        if start <= today <= end:
            return range_["type"]
    return None  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç –Ω–∏ –≤ –æ–¥–∏–Ω –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤

                 
def get_last_shown_date(user_id):
    cursor.execute("SELECT last_shown_date FROM users WHERE user_id = %s", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else None

def update_last_shown_date(user_id, date):
    cursor.execute("UPDATE users SET last_shown_date = %s WHERE user_id = %s", (date, user_id))
    connection.commit()

@bot.callback_query_handler(func=lambda call: call.data.startswith("show_schedule_"))
def show_schedule(call):
    faculty = call.data.split("_")[3]
    group = call.data.split("_")[2]
    schedule_path = os.path.join(os.getcwd(), f"{faculty}\{group}.xlsx")

    last_date = get_last_shown_date(call.from_user.id)
    today = datetime.date.today()

    if last_date != today:
        try:
            df = pd.read_excel(schedule_path)
            current_week_type = get_current_week_type(date_ranges)
            response = format_schedule(df, current_week_type)
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="change_data"))
            markup.add(types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"show_schedule_{group}_{faculty}"))
            
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=response, reply_markup=markup, parse_mode='Markdown')
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞
            update_last_shown_date(call.from_user.id, today)
            
        except Exception as e:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="change_data"))
            bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {faculty} {group}. –ü—Ä–∏—á–∏–Ω–∞: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=markup)
    else:
        return

@bot.callback_query_handler(func=lambda call: call.data == "change_data")
def change_data(call):
    markup = types.InlineKeyboardMarkup()
    for faculty in DATA_HIERARCHY.keys():
        markup.add(types.InlineKeyboardButton(text=faculty, callback_data=f"faculty_{faculty}"))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –≤—Å–µ –ø–æ–ª—è –∫—Ä–æ–º–µ user_id –≤ NULL –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    try:
        cursor.execute("UPDATE users SET faculty = NULL, form_of_education = NULL, course = NULL, group_name = NULL, last_shown_date = NULL WHERE user_id = %s", (call.from_user.id,))
        connection.commit()
    except Exception as e:
        print(f"Error updating user data: {e}")  # –∏–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=markup)


bot.polling()